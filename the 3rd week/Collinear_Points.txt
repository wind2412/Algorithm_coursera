See the Assessment Guide for information on how to interpret this report.

Assessment Summary

Compilation:  PASSED
Style:        FAILED
Findbugs:     Potential bugs found.
API:          PASSED

Correctness:  37/41 tests passed
Memory:       1/1 tests passed
Timing:       39/41 tests passed

Aggregate score: 92.44% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]

Assessment Details

The following files were submitted:
----------------------------------
total 28K
-rw-r--r-- 1 3.2K Oct  7 01:27 BruteCollinearPoints.java
-rw-r--r-- 1 5.8K Oct  7 01:27 FastCollinearPoints.java
-rw-r--r-- 1 4.9K Oct  7 01:27 Point.java
-rw-r--r-- 1 5.9K Oct  7 01:27 studentSubmission.zip


********************************************************************************
*          COMPILING                                                           *
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

================================================================

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

================================================================

% javac FastCollinearPoints.java
*-----------------------------------------------------------

================================================================



% checkstyle *.java
*-----------------------------------------------------------
[ERROR] Point.java:57:5: File contains tab characters (this is the first instance). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[ERROR] Point.java:57:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] Point.java:57:38: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] Point.java:60:16: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] Point.java:60:34: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] Point.java:63:16: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] Point.java:63:34: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] Point.java:64:31: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[ERROR] Point.java:67:29: Typecast is not followed by whitespace. [WhitespaceAfter]
[ERROR] Point.java:91:65: '>' is followed by an illegal character. [GenericWhitespace]
[ERROR] Point.java:91:65: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] Point.java:95:29: Typecast is not followed by whitespace. [WhitespaceAfter]
[ERROR] Point.java:147:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] Point.java:147:44: '++' is preceded with whitespace. [NoWhitespaceBefore]
[ERROR] Point.java:147:48: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] Point.java:151:33: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] Point.java:152:33: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] Point.java:153:33: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] Point.java:154:33: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] BruteCollinearPoints.java:7:1: File contains tab characters (this is the first instance). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[ERROR] BruteCollinearPoints.java:11:11: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:13:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:13:44: '++' is preceded with whitespace. [NoWhitespaceBefore]
[ERROR] BruteCollinearPoints.java:13:48: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:14:15: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:18:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:18:46: '++' is preceded with whitespace. [NoWhitespaceBefore]
[ERROR] BruteCollinearPoints.java:18:50: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:19:15: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:22:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:22:44: '++' is preceded with whitespace. [NoWhitespaceBefore]
[ERROR] BruteCollinearPoints.java:22:48: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:25:16: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:25:48: '++' is preceded with whitespace. [NoWhitespaceBefore]
[ERROR] BruteCollinearPoints.java:25:51: ')' is preceded with whitespace. [ParenPad]
[ERROR] BruteCollinearPoints.java:25:53: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:26:19: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:31:20: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:31:54: '++' is preceded with whitespace. [NoWhitespaceBefore]
[ERROR] BruteCollinearPoints.java:31:58: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:32:23: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:33: Line is longer than 128 characters (currently 138). [LineLength]
[ERROR] BruteCollinearPoints.java:33:23: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:33:61: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:35:27: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:35:37: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:37:31: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:47:31: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:47:65: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:48:47: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[ERROR] BruteCollinearPoints.java:50:30: 'else' is not preceded with whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:50:30: '}' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:50:34: 'else' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:50:34: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:53:31: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:53:41: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:66:38: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:68:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:68:36: '++' is preceded with whitespace. [NoWhitespaceBefore]
[ERROR] BruteCollinearPoints.java:68:40: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:86:30: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] BruteCollinearPoints.java:87:30: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] BruteCollinearPoints.java:88:30: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] BruteCollinearPoints.java:89:30: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] BruteCollinearPoints.java:90:30: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] BruteCollinearPoints.java:91:30: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] BruteCollinearPoints.java:92:30: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] BruteCollinearPoints.java:93:30: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] BruteCollinearPoints.java:94:30: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] BruteCollinearPoints.java:95:30: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] BruteCollinearPoints.java:96:31: ',' is not followed by whitespace. [WhitespaceAfter]
[ERROR] BruteCollinearPoints.java:99:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] BruteCollinearPoints.java:99:40: '++' is preceded with whitespace. [NoWhitespaceBefore]
[ERROR] BruteCollinearPoints.java:99:44: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] FastCollinearPoints.java:8:1: File contains tab characters (this is the first instance). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[ERROR] FastCollinearPoints.java:23:12: 'for' is not followed by whitespace. [WhitespaceAround]
[ERROR] FastCollinearPoints.java:23:46: '++' is preceded with whitespace. [NoWhitespaceBefore]
[ERROR] FastCollinearPoints.java:23:50: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] FastCollinearPoints.java:25:15: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] FastCollinearPoints.java:81:27: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] FastCollinearPoints.java:81:55: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] FastCollinearPoints.java:82:43: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[ERROR] FastCollinearPoints.java:84:26: 'else' is not preceded with whitespace. [WhitespaceAround]
[ERROR] FastCollinearPoints.java:84:26: '}' is not followed by whitespace. [WhitespaceAround]
[ERROR] FastCollinearPoints.java:84:30: 'else' is not followed by whitespace. [WhitespaceAround]
[ERROR] FastCollinearPoints.java:84:30: '{' is not preceded with whitespace. [WhitespaceAround]
[ERROR] FastCollinearPoints.java:102:19: The comment is empty. [IllegalTokenText]
[ERROR] FastCollinearPoints.java:112:19: Do not use the 'instanceof' operator in this course. Use 'getClass()' to compare classes. [IllegalToken]
[ERROR] FastCollinearPoints.java:118:26: Do not use the 'instanceof' operator in this course. Use 'getClass()' to compare classes. [IllegalToken]
Checkstyle ends with 89 errors.

================================================================


% findbugs *.class
*-----------------------------------------------------------
H D DLS_DEAD_LOCAL_STORE DLS: Dead store to pp4 in Point.main(String[])  At Point.java:[line 154]
M V EI_EXPOSE_REP EI: BruteCollinearPoints.segments() may expose internal representation by returning lines  At BruteCollinearPoints.java:[line 80]
H P DM_BOXED_PRIMITIVE_FOR_COMPARE Bx: Primitive is boxed to call Double.compareTo(Double): use Double.compare(double, double) instead  At Point.java:[line 95]
M V EI_EXPOSE_REP EI: FastCollinearPoints.segments() may expose internal representation by returning lines  At FastCollinearPoints.java:[line 135]
Warnings generated: 4

================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


******************************************************************************
*          CORRECTNESS
******************************************************************************

Testing methods in Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  *  positive infinite slope, where p and q have coordinates in [0, 500)
  *  positive infinite slope, where p and q have coordinates in [0, 32768)
  *  negative infinite slope, where p and q have coordinates in [0, 500)
  *  negative infinite slope, where p and q have coordinates in [0, 32768)
  *  positive zero     slope, where p and q have coordinates in [0, 500)
  *  positive zero     slope, where p and q have coordinates in [0, 32768)
  *  symmetric  for random points p and q with coordinates in [0, 500)
  *  symmetric  for random points p and q with coordinates in [0, 32768)
  *  transitive for random points p, q, and r with coordinates in [0, 500)
  *  transitive for random points p, q, and r with coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 500)
  *  slopeTo(), where p and q have coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 10)
  *  throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p and q have coordinates in [0, 500)
  *  antisymmetric, where p and q have coordinates in [0, 32768)
  *  transitive, where p, q, and r have coordinates in [0, 500)
  *  transitive, where p, q, and r have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 500)
  *  sign of compareTo(), where p and q have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 10)
  *  throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p, q, and r have coordinates in [0, 500)
  *  antisymmetric, where p, q, and r have coordinates in [0, 32768)
  *  transitive, where p, q, r, and s have coordinates in [0, 500)
  *  transitive, where p, q, r, and s have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 500)
  *  sign of compare(), where p, q, and r have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 10)
  *  throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================

******************************************************************************
*          correctness (using reference Point.java and LineSegment.java)
******************************************************************************

Testing methods in BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==> passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
==> passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==> passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
==> passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==> passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
==> passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==> passed

Test 5: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==> passed

Test 6: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==> passed

Test 7: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==> passed

Test 8: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==> passed

Test 9: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==> passed

Test 10: Check that data type is immutable by testing whether each method
        returns the same value, regardless of any intervening operations
  *  input8.txt
     -  failed after 7 operations involving BruteCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.segments()
          collinear.numberOfSegments() -> 2
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 2
          collinear.segments()
     -  failed on trial 1 of 100

  *  equidistant.txt
     -  failed after 21 operations involving BruteCollinearPoints
     -  first and last call to segments() returned different arrays
     -  failed on trial 2 of 100

==> FAILED

Test 11: Check that data type does not mutate the constructor argument
  *  input8.txt
     -  data type mutated the points[] array
     -  data type should have no side effects unless documented in API
  *  equidistant.txt
     -  data type mutated the points[] array
     -  data type should have no side effects unless documented in API
==> FAILED

Test 12: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = horizontal5.txt
  *  filename = vertical5.txt
  *  filename = random23.txt
==> passed

Test 13: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==> passed

Test 14: Check that the constructor throws an exception if duplicate points
  *  50 points
  *  25 points
  *  5 points
  *  4 points
  *  3 points
  *  2 points
==> passed


Total: 15/17 tests passed!


================================================================

Testing methods in FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==> passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
  *  filename = horizontal50.txt
  *  filename = horizontal75.txt
  *  filename = horizontal100.txt
==> passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==> passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
  *  filename = vertical50.txt
  *  filename = vertical75.txt
  *  filename = vertical100.txt
==> passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==> passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
  *  filename = random91.txt
  *  filename = random152.txt
==> passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==> passed

Test 5a: Points from a file with 5 or more on some line segments
  *  filename = input9.txt
  *  filename = input10.txt
  *  filename = input20.txt
  *  filename = input50.txt
  *  filename = input80.txt
  *  filename = input300.txt
  *  filename = inarow.txt
==> passed

Test 5b: Points from a file with 5 or more on some line segments
  *  filename = kw1260.txt
  *  filename = rs1423.txt
==> passed

Test 6: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==> passed

Test 7: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==> passed

Test 8: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==> passed

Test 9: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==> passed

Test 10: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==> passed

Test 11: Random distinct points in a given range
  *  5 random points in a 10-by-10 grid
  *  10 random points in a 10-by-10 grid
  *  50 random points in a 10-by-10 grid
  *  90 random points in a 10-by-10 grid
  *  200 random points in a 50-by-50 grid
==> passed

Test 12: M*N points on an M-by-N grid
  *  3-by-3 grid
  *  4-by-4 grid
  *  5-by-5 grid
  *  10-by-10 grid
  *  20-by-20 grid
  *  5-by-4 grid
  *  6-by-4 grid
  *  10-by-4 grid
  *  15-by-4 grid
  *  25-by-4 grid
==> passed

Test 13: Check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  *  input8.txt
     -  failed after 27 operations involving FastCollinearPoints
     -  first and last call to segments() returned different arrays
     -  failed on trial 3 of 100

  *  equidistant.txt
     -  failed after 19 operations involving FastCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 4
          collinear.segments()
          collinear.numberOfSegments() -> 4
          collinear.numberOfSegments() -> 4
          collinear.numberOfSegments() -> 4
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -> 4
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -> 4
          collinear.numberOfSegments() -> 4
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          mutate array returned by last call to segments()
          collinear.segments()
     -  failed on trial 2 of 100

==> FAILED

Test 14: Check that data type does not mutate the constructor argument
  *  input8.txt
     -  data type mutated the points[] array
     -  data type should have no side effects unless documented in API
  *  equidistant.txt
     -  data type mutated the points[] array
     -  data type should have no side effects unless documented in API
==> FAILED

Test 15: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = horizontal5.txt
  *  filename = vertical5.txt
  *  filename = random23.txt
==> passed

Test 16: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==> passed

Test 17: Check that the constructor throws an exception if duplicate points
  *  50 points
  *  25 points
  *  5 points
  *  4 points
  *  3 points
  *  2 points
==> passed


Total: 19/21 tests passed!


================================================================

******************************************************************************
*          MEMORY
******************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



******************************************************************************
*          TIMING
******************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.01           0        1680           3360                   59         
=> passed    32   0.00           0       14880          29760                  151         
=> passed    64   0.01           0      124992         249984                  366         
=> passed   128   0.02           0     1024128        2048256                  869         
=> passed   256   0.10           0     8290560       16581120                 1967         
==> 5/5 tests passed

Test 2a-2e: Find collinear points among N/4 arbitrary line segments


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00           0        1600           3200                  157         
=> passed    32   0.00           0       14631          29262                  342         
=> passed    64   0.00           0      123353         246706                  754         
=> passed   128   0.02           0     1017771        2035542                 1640         
=> passed   256   0.10           0     8263459       16526918                 3520         
==> 5/5 tests passed

Total: 10/10 tests passed!

================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.02           0       21824          43648                 8365         
=> passed   128   0.01           0       97788         195576                33249         
=> passed   256   0.06           0      450471         900942               132283         
=> passed   512   0.20           0     2047010        4094020               527257         
=> passed  1024   0.35           0     8997724       17995448              2104079         
=> passed  2048   0.96           0    39603724       79207448              8404519         
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (79207448 / 17995448) = 2.14
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the N points on an N-by-1 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00           0        8732          17464                13160         
=> passed   128   0.01           0       33924          67848                51032         
=> passed   256   0.03           0      133741         267482               200914         
=> passed   512   0.13           0      530519        1061038               796316         
=> passed  1024   1.04           0     2111554        4223108              3168289         
=> passed  2048   7.05           0     8421422       16842844             12633927         
=> passed  4096  54.99           0    33628187       67256374             50445670         
Aborting: time limit of 10 seconds exceeded

Test 3a-3g: Find collinear points among the N points on an N/4-by-4 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
------------------------------

...

Warning: the grading output was truncated due to excessive length.
Typically, this is becasue you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception).